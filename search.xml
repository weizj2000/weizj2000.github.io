<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>贪心算法</title>
      <link href="/2023/01/20//post/greedy-algorithm-7lkrt.html/"/>
      <url>/2023/01/20//post/greedy-algorithm-7lkrt.html/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p>‍</p><h1 id="算法综述"><a href="#算法综述" class="headerlink" title="算法综述"></a>算法综述</h1><p>贪心的本质是选择每一阶段的局部最优，从而达到全局最优。</p><h2 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h2><p>贪心的本质是选择每一阶段的局部最优，从而达到全局最优。难点就是如何通过局部最优，推出整体最优。</p><blockquote><p>例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，指定每次拿最大的，最终结果就是拿走最大数额的钱。每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。</p></blockquote><h2 id="算法模版"><a href="#算法模版" class="headerlink" title="算法模版"></a>算法模版</h2><blockquote><p>贪心算法的难点就是如何通过局部最优，推出整体最优。这往往没有固定的策略，靠自己手动模拟，如果模拟可行，就可以试一试贪心策略，如果不可行，可能需要动态规划。</p><p>最好用的策略就是举反例，如果想不到反例，那么就试一试贪心吧。</p></blockquote><p>贪心算法一般分为如下四步：</p><ol><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ol><h2 id="算法应用场景"><a href="#算法应用场景" class="headerlink" title="算法应用场景"></a>算法应用场景</h2><p>‍</p><p>‍</p><h1 id="刷题路线"><a href="#刷题路线" class="headerlink" title="刷题路线"></a>刷题路线</h1><p>​<img src="https://resource.weizhanjun.com/public/images/20230110211226.png" alt="">​</p><h1 id="刷题记录"><a href="#刷题记录" class="headerlink" title="刷题记录"></a>刷题记录</h1><h2 id="简单难度"><a href="#简单难度" class="headerlink" title="简单难度"></a>简单难度</h2><h3 id="问题-分发饼干"><a href="#问题-分发饼干" class="headerlink" title="问题: 分发饼干"></a>问题: 分发饼干</h3><p><a href="https://leetcode.cn/problems/assign-cookies/">LeetCode</a></p><blockquote><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p></blockquote><p>‍</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><p>这里的局部最优就是大饼干喂给胃口大的，充分利用饼干尺寸喂饱一个，全局最优就是喂饱尽可能多的小孩。</p><p>先将饼干数组和小孩数组排序, 然后从后向前遍历小孩数组，用大饼干优先满足胃口大的，并统计满足小孩数量。</p><p>​<img src="https://resource.weizhanjun.com/public/images/20230110203853.png" alt="">​</p></blockquote><p>‍</p><h4 id="Go题解"><a href="#Go题解" class="headerlink" title="Go题解"></a>Go题解</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span>g <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 小孩和饼干数组排序</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 定义饼干数组小标</span>    index <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">// 倒序遍历小孩数组</span>    result <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token function">len</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 饼干没有分完，且当前小孩胃口小于饼干尺寸, 饼干分出去</span>        <span class="token keyword">if</span> index <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">{</span>            result<span class="token operator">++</span>            index<span class="token operator">--</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-题解"><a href="#C-题解" class="headerlink" title="C++题解"></a>C++题解</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> g<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>g<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token operator">++</span><span class="token punctuation">;</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‍</p><h4 id="Python题解"><a href="#Python题解" class="headerlink" title="Python题解"></a>Python题解</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> g<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        g<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 小孩轮流来领饼干，当饼干满足胃口就分出去</span>            <span class="token keyword">if</span> res <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> g<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h4><blockquote><p>文中详细介绍了思考的过程，想清楚局部最优，想清楚全局最优，感觉局部最优是可以推出全局最优，并想不出反例，那么就试一试贪心。</p></blockquote><p>‍</p><h3 id="问题：1005K次取反后最大化的数组和"><a href="#问题：1005K次取反后最大化的数组和" class="headerlink" title="问题：1005K次取反后最大化的数组和"></a>问题：1005K次取反后最大化的数组和</h3><p><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/">LeetCode</a></p><blockquote><p>给你一个整数数组 nums 和一个整数 k ，按以下方法修改该数组：</p><p>选择某个下标 i 并将 nums[i] 替换为 -nums[i]</p><p>重复这个过程恰好 k 次。可以多次选择同一个下标 i</p><p>以这种方式修改数组后，返回数组 可能的最大和 。</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 104<br>-100 &lt;= nums[i] &lt;= 100<br>1 &lt;= k &lt;= 104</p><p>示例1:</p><pre class="line-numbers language-shell"><code class="language-shell">输入：nums = [4,2,3], k = 1输出：5解释：选择下标 1 ，nums 变为 [4,-2,3] 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2:</p><pre class="line-numbers language-shell"><code class="language-shell">输入：nums = [3,-1,0,2], k = 3输出：6解释：选择下标 (1, 2, 2) ，nums 变为 [3,1,0,2] 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例3:</p><pre class="line-numbers language-shell"><code class="language-shell">输入：nums = [2,-3,-1,5,-4], k = 2输出：13解释：选择下标 (1, 4) ，nums 变为 [2,3,-1,5,4] 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>‍</p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><p>贪心的思路，局部最优：让绝对值大的负数变为正数，当前数值达到最大，整体最优：整个数组和达到最大。</p><p>那么本题的解题步骤为：</p><p>第一步：将数组按照绝对值大小从大到小排序，注意要按照绝对值的大小<br>第二步：从前向后遍历，遇到负数将其变为正数，同时K–<br>第三步：如果K还大于0，那么反复转变数值最小的元素，将K用完<br>第四步：求和</p></blockquote><h4 id="Go-题解"><a href="#Go-题解" class="headerlink" title="Go 题解"></a>Go 题解</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">largestSumAfterKNegations</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">></span><span class="token number">0</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span>            k<span class="token operator">--</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> k <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">{</span>        nums<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>    result <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        result <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-题解-1"><a href="#C-题解-1" class="headerlink" title="C++ 题解"></a>C++ 题解</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span><span class="token keyword">static</span> bool <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">largestSumAfterKNegations</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                k<span class="token operator">--</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token punctuation">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-题解"><a href="#Python-题解" class="headerlink" title="Python 题解"></a>Python 题解</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largestSumAfterKNegations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums <span class="token operator">=</span> sorted<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> key<span class="token operator">=</span>abs<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">and</span> k <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span>                k <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">if</span> k <span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> k <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="算法优化总结"><a href="#算法优化总结" class="headerlink" title="算法优化总结"></a>算法优化总结</h4><blockquote><p>‍</p></blockquote><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h2 id="中等难度"><a href="#中等难度" class="headerlink" title="中等难度"></a>中等难度</h2><h3 id="问题：摆动序列"><a href="#问题：摆动序列" class="headerlink" title="问题：摆动序列"></a>问题：摆动序列</h3><p><a href="https://leetcode.cn/problems/wiggle-subsequence/">LeetCode</a></p><blockquote><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p><ul><li>例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为差值 (6, -3, 5, -7, 3) 是正负交替出现的。</li><li>相反，[1, 4, 7, 2, 5] 和 [1, 7, 4, 5, 5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</li></ul><p>子序列可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p><p>给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。</p></blockquote><p>‍</p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><p>​<img src="https://resource.weizhanjun.com/public/images/20230110222257.png" alt="">​</p><p>局部最优：删除单调坡度上的节点（不包括单调坡度两端的节点），那么这个坡度就可以有两个局部峰值。</p><p>整体最优：整个序列有最多的局部峰值，从而达到最长摆动序列。</p><p>在计算是否有峰值的时候，遍历下标i ，计算prediff（nums[i] - nums[i-1]） 和 curdiff（nums[i+1] - nums[i]），如果prediff &lt; 0 &amp;&amp; curdiff &gt; 0 或者 prediff &gt; 0 &amp;&amp; curdiff &lt; 0 此时就有波动就需要统计。</p><p>但本题要考虑三种情况：</p><p><strong>情况一</strong>：上下坡中有平坡</p><p>​<img src="https://resource.weizhanjun.com/public/images/20230110222700.png" alt=""></p><p>长度是3，也就是我们在删除的时候 要不删除左面的三个2，要不就删除右边的三个2。</p><p>在图中，当i指向第一个2的时候，prediff &gt; 0 &amp;&amp; curdiff = 0 ，当 i 指向最后一个2的时候 prediff = 0 &amp;&amp; curdiff &lt; 0。</p><p>删左面三个2的规则，那么 当 prediff = 0 &amp;&amp; curdiff &lt; 0 也要记录一个峰值，因为他是把之前相同的元素都删掉留下的峰值。</p><p>所以我们记录峰值的条件应该是： (preDiff &lt;= 0 &amp;&amp; curDiff &gt; 0) || (preDiff &gt;= 0 &amp;&amp; curDiff &lt; 0)，为什么这里允许 prediff == 0 ，就是为了 上面我说的这种情况。</p><p><strong>情况二</strong>：数组首尾两端</p><p>题目中说了，如果只有两个不同的元素，那摆动序列也是2。例如序列[2,5]，如果靠统计差值来计算峰值个数就需要考虑数组最左面和最右面的特殊情况。因为我们在计算 prediff（nums[i] - nums[i-1]） 和 curdiff（nums[i+1] - nums[i]）的时候，至少需要三个数字才能计算，而数组只有两个数字。可以单独判断元素为2时的条件，如果只有两个元素，且元素不同，那么结果为2。</p><p><strong>情况三</strong>：单调坡中有平坡</p><p>​<img src="https://resource.weizhanjun.com/public/images/20230110223428.png" alt="">​</p><p>‍</p><p>‍</p></blockquote><h4 id="Go-题解-1"><a href="#Go-题解-1" class="headerlink" title="Go 题解"></a>Go 题解</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">2</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    curDiff <span class="token operator">:=</span> <span class="token number">0</span>    preDiff <span class="token operator">:=</span> <span class="token number">0</span>    result <span class="token operator">:=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>        curDiff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preDiff <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curDiff<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>preDiff <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curDiff<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token operator">++</span>            preDiff <span class="token operator">=</span> curDiff        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-题解-2"><a href="#C-题解-2" class="headerlink" title="C++ 题解"></a>C++ 题解</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> curDiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> preDiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDiff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>preDiff <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curDiff <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>preDiff <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curDiff <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token operator">++</span><span class="token punctuation">;</span>                preDiff <span class="token operator">=</span> curDiff<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-题解-1"><a href="#Python-题解-1" class="headerlink" title="Python 题解"></a>Python 题解</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        preDiff<span class="token punctuation">,</span> curDiff<span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">2</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            curDiff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> curDiff <span class="token operator">*</span> preDiff <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">and</span> curDiff<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># curDiff * preDiff 为负，表示有摆动</span>                result <span class="token operator">+=</span><span class="token number">1</span>                preDiff <span class="token operator">=</span> curDiff        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化总结"><a href="#优化总结" class="headerlink" title="优化总结"></a>优化总结</h4><ul><li><input disabled="" type="checkbox"> 动态规划解题</li></ul><p>‍</p><h3 id="问题：122-买卖股票的最佳时机II"><a href="#问题：122-买卖股票的最佳时机II" class="headerlink" title="问题：122.买卖股票的最佳时机II"></a>问题：122.买卖股票的最佳时机II</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">LeetCode</a></p><blockquote><p>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。返回 你能获得的 最大 利润 。</p><p>提示：</p><p>1 &lt;= prices.length &lt;= 3 * 104<br>0 &lt;= prices[i] &lt;= 104</p><p>示例1:</p><pre class="line-numbers language-shell"><code class="language-shell">输入：prices = [7,1,5,3,6,4]输出：7解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。     总利润为 4 + 3 = 7 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2:</p><pre class="line-numbers language-shell"><code class="language-shell">输入：prices = [1,2,3,4,5]输出：4解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。     总利润为 4 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例3:</p><pre class="line-numbers language-shell"><code class="language-shell"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‍</p><p>弟弟</p></blockquote><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><p>这道题目可能我们只会想，选一个低的买入，再选个高的卖，再选一个低的买入…..循环反复。如果想到其实最终利润是可以分解的，那么本题就很容易了！</p><p>假如第0天买入，第3天卖出，那么利润为：prices[3] - prices[0]。相当于(prices[3] - prices[2]) + (prices[2] - prices[1]) + (prices[1] - prices[0])。</p><p>此时就是把利润分解为每天为单位的维度，而不是从0天到第3天整体去考虑！那么根据prices可以得到每天的利润序列：(prices[i] - prices[i - 1])…..(prices[1] - prices[0])。</p><p>​<img src="https://resource.weizhanjun.com/public/images/20230112142600.png" alt="">​</p><p>局部最优：收集每天的正利润，全局最优：求得最大利润。时间复杂度：O(n), 空间复杂度：O(1)</p><ul><li><input disabled="" type="checkbox"> 动态规划解法</li></ul><p>‍</p></blockquote><h4 id="Go-题解-2"><a href="#Go-题解-2" class="headerlink" title="Go 题解"></a>Go 题解</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    res <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span><span class="token number">0</span> <span class="token punctuation">{</span>            res <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-题解-3"><a href="#C-题解-3" class="headerlink" title="C++ 题解"></a>C++ 题解</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">+</span><span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-题解-2"><a href="#Python-题解-2" class="headerlink" title="Python 题解"></a>Python 题解</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        result <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="算法优化总结-1"><a href="#算法优化总结-1" class="headerlink" title="算法优化总结"></a>算法优化总结</h4><blockquote><p>股票问题其实是一个系列的，属于动态规划的范畴，但是使用贪心往往比动态规划更巧妙，更好用。</p><p>本题中理解利润拆分是关键点！ 不要整块的去看，而是把整体利润拆为每天的利润。</p></blockquote><p>‍</p><h3 id="问题：134-加油站"><a href="#问题：134-加油站" class="headerlink" title="问题：134.加油站"></a>问题：134.加油站</h3><p><a href="https://leetcode.cn/problems/gas-station/">LeetCode</a></p><blockquote><p>在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。你有一辆油箱容量无限的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。给定两个整数数组 gas 和 cost ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。</p><p>提示:</p><p>gas.length == n<br>cost.length == n<br>1 &lt;= n &lt;= 105<br>0 &lt;= gas[i], cost[i] &lt;= 104</p><p>示例1:</p><pre class="line-numbers language-shell"><code class="language-shell">输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]输出: 3解释:从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。因此，3 可为起始索引。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2:</p><pre class="line-numbers language-shell"><code class="language-shell">输入: gas = [2,3,4], cost = [3,4,3]输出: -1解释:你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。因此，无论怎样，你都不可能绕环路行驶一周。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><h5 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h5><p>暴力的方法很明显就是$O(n^2)$的，遍历每一个加油站为起点的情况，模拟一圈。如果跑了一圈，中途没有断油，而且最后油量大于等于0，说明这个起点是ok的。</p><p>for循环适合模拟从头到尾的遍历，而while循环适合模拟环形遍历，要善于使用while！</p><p>时间复杂度：O(n^2)，空间复杂度：O(1)</p><h5 id="贪心算法1"><a href="#贪心算法1" class="headerlink" title="贪心算法1"></a>贪心算法1</h5><p>直接从全局进行贪心选择，情况如下：</p><p>情况一：如果gas的总和小于cost总和，那么无论从哪里出发，一定是跑不了一圈的</p><p>情况二：rest[i] = gas[i]-cost[i]为一天剩下的油，i从0开始计算累加到最后一站，如果累加没有出现负数，说明从0出发，油就没有断过，那么0就是起点。</p><p>情况三：如果累加的最小值是负数，汽车就要从非0节点出发，从后向前，看哪个节点能这个负数填平，能把这个负数填平的节点就是出发节点。</p><h5 id="贪心2"><a href="#贪心2" class="headerlink" title="贪心2"></a>贪心2</h5><p>首先如果总油量减去总消耗大于等于零那么一定可以跑完一圈，说明 各个站点的加油站 剩油量rest[i]相加一定是大于等于零的。</p><p>每个加油站的剩余量rest[i]为gas[i] - cost[i]。i从0开始累加rest[i]，和记为curSum，一旦curSum小于零，说明[0, i]区间都不能作为起始位置，起始位置从i+1算起，再从0计算curSum。</p><p>​<img src="https://resource.weizhanjun.com/public/images/20230112220909.png" alt="">​</p><p>为什么一旦[i，j] 区间和为负数，起始位置就可以是j+1呢，j+1后面就不会出现更大的负数？如果出现更大的负数，就是更新j，那么起始位置又变成新的j+1了。</p><p>而且j之前出现了多少负数，j后面就会出现多少正数，因为耗油总和是大于零的(以可以跑完全程为前提)</p><p>那么局部最优：当前累加rest[j]的和curSum一旦小于0，起始位置至少要是j+1，因为从j开始一定不行。全局最优：找到可以跑一圈的起始位置。</p></blockquote><h4 id="Go-题解（暴力破解）"><a href="#Go-题解（暴力破解）" class="headerlink" title="Go 题解（暴力破解）"></a>Go 题解（暴力破解）</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span>gas <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> cost <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 遍历加油站</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 油箱剩余量</span>        rest <span class="token operator">:=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        index <span class="token operator">:=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token function">len</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// go没有while，使用for代替</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 油耗尽或者回到出发点加油站，退出</span>            <span class="token keyword">if</span> rest <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">==</span> i <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>            rest <span class="token operator">+=</span> gas<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>index<span class="token punctuation">]</span>            index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token function">len</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> rest <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">==</span> i <span class="token punctuation">{</span>            <span class="token keyword">return</span> i        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Go-题解（贪心2）"><a href="#Go-题解（贪心2）" class="headerlink" title="Go 题解（贪心2）"></a>Go 题解（贪心2）</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span>gas <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> cost <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    curSum <span class="token operator">:=</span> <span class="token number">0</span>    totalSum <span class="token operator">:=</span> <span class="token number">0</span>    index <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>gas<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        curSum <span class="token operator">+=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        totalSum <span class="token operator">+=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> curSum <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>            curSum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> totalSum <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> index<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-题解（暴力破解）"><a href="#C-题解（暴力破解）" class="headerlink" title="C++ 题解（暴力破解）"></a>C++ 题解（暴力破解）</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> gas<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>cost<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> rest <span class="token operator">=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> cost<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rest <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rest <span class="token operator">+</span><span class="token operator">=</span> gas<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                index <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> cost<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-题解（贪心1）"><a href="#C-题解（贪心1）" class="headerlink" title="C++ 题解（贪心1）"></a>C++ 题解（贪心1）</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> gas<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> curSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从起点出发，油箱里的油量最小值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>gas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> rest <span class="token operator">=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            curSum <span class="token operator">+</span><span class="token operator">=</span> rest<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curSum <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> curSum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curSum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 情况一</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 情况二</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> rest <span class="token operator">=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            min <span class="token operator">+</span><span class="token operator">=</span> rest<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-题解（贪心2）"><a href="#Python-题解（贪心2）" class="headerlink" title="Python 题解（贪心2）"></a>Python 题解（贪心2）</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> gas<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> cost<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        totalSum<span class="token punctuation">,</span> curSum<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>gas<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            curSum <span class="token operator">+=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            totalSum <span class="token operator">+=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> curSum <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>                index <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>                curSum <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">if</span> totalSum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> index <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="算法优化总结-2"><a href="#算法优化总结-2" class="headerlink" title="算法优化总结"></a>算法优化总结</h4><blockquote><p>‍</p></blockquote><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><hr><h2 id="困难难度"><a href="#困难难度" class="headerlink" title="困难难度"></a>困难难度</h2><h3 id="问题：最大子序和"><a href="#问题：最大子序和" class="headerlink" title="问题：最大子序和"></a>问题：最大子序和</h3><p><a href="https://leetcode.cn/problems/maximum-subarray/">LeetCode</a></p><blockquote><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。子数组 是数组中的一个连续部分。</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 105<br>-104 &lt;= nums[i] &lt;= 104</p><p><strong>示例1:</strong></p><pre class="line-numbers language-plaintext"><code class="language-plaintext">输入：nums = [1]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例2:</strong></p><pre class="line-numbers language-plaintext"><code class="language-plaintext">输入：nums = [5,4,-1,7,8]输出：23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><h5 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h5><p>第一层for 就是设置起始位置，第二层for循环遍历数组寻找最大值，时间复杂度O(n^2)，空间复杂度：O(1)</p><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> INT32_MIN<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 设置起始位置</span>            count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 每次从起始位置i开始遍历寻找最大值</span>                count <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> count <span class="token operator">></span> result <span class="token operator">?</span> count <span class="token punctuation">:</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++勉强可以过，其他语言运行超时。</p><h5 id="贪心解法"><a href="#贪心解法" class="headerlink" title="贪心解法"></a>贪心解法</h5><p><strong>局部最优</strong>：当前“连续和”为负数的时候立刻放弃，从下一个元素重新计算“连续和”，因为负数加上下一个元素 “连续和”只会越来越小。</p><p><strong>全局最优</strong>：选取最大“连续和”</p><p>局部最优的情况下，并记录最大的“连续和”，可以推出全局最优。</p><p>遍历nums，从头开始用count累积，如果count一旦加上nums[i]变为负数，那么就应该从nums[i+1]开始从0累积count了，因为已经变为负数的count，只会拖累总和。</p><p>这相当于是暴力解法中的不断调整最大子序和区间的起始位置。</p><p>区间的终止位置，其实就是如果count取到最大值了，及时记录下来了。代码看C++题解，<strong>时间复杂度：O(n)，空间复杂度：O(1)</strong></p><ul><li><input disabled="" type="checkbox"> 动态规划解法</li></ul></blockquote><p>‍</p><h4 id="Go-题解-3"><a href="#Go-题解-3" class="headerlink" title="Go 题解"></a>Go 题解</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    result <span class="token operator">:=</span> <span class="token operator">^</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span>    count <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        count <span class="token operator">=</span> count <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 取区间累计的最大值（相当于不断确定最大子序终止位置）</span>        <span class="token keyword">if</span> count <span class="token operator">></span> result <span class="token punctuation">{</span>            result <span class="token operator">=</span> count        <span class="token punctuation">}</span>        <span class="token keyword">if</span> count <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 相当于重置最大子序起始位置，因为遇到负数一定是拉低总和</span>            count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-题解-4"><a href="#C-题解-4" class="headerlink" title="C++ 题解"></a>C++ 题解</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> INT32_MIN<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> count<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-题解-3"><a href="#Python-题解-3" class="headerlink" title="Python 题解"></a>Python 题解</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token operator">-</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            count <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> count <span class="token operator">></span> result<span class="token punctuation">:</span>                result <span class="token operator">=</span> count            <span class="token keyword">if</span> count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="算法优化总结-3"><a href="#算法优化总结-3" class="headerlink" title="算法优化总结"></a>算法优化总结</h4><blockquote><p>贪心没套路，就刷题而言，如果感觉好像局部最优可以推出全局最优，然后想不到反例，那就试一试贪心吧！</p><p>贪心的思路为局部最优：当前“连续和”为负数的时候立刻放弃，从下一个元素重新计算“连续和”，因为负数加上下一个元素 “连续和”只会越来越小。从而推出全局最优：选取最大“连续和”</p></blockquote><p>‍</p><h3 id="问题：跳跃游戏"><a href="#问题：跳跃游戏" class="headerlink" title="问题：跳跃游戏"></a>问题：跳跃游戏</h3><p><a href="https://leetcode.cn/problems/jump-game/">LeetCode</a></p><blockquote><p>给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标。</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 3 * 104<br>0 &lt;= nums[i] &lt;= 105</p><p>示例1:</p><p>输入：nums = [2,3,1,1,4]<br>输出：true<br>解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</p><p>示例2:</p><p>输入：nums = [3,2,1,0,4]<br>输出：false<br>解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</p><p>‍</p></blockquote><h4 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><p>看到题目，当前位置元素如果是3，第一时间想到究竟是跳一步呢，还是两步呢，还是三步呢，究竟跳几步才是最优呢？其实跳几步无所谓，关键在于可跳的覆盖范围！</p><p>不一定非要明确一次究竟跳几步，每次取最大的跳跃步数，这个就是可以跳跃的覆盖范围。那么<strong>这个问题就转化为跳跃覆盖范围究竟可不可以覆盖到终点</strong>！</p><p>贪心算法局部最优解：每次取最大跳跃步数（取最大覆盖范围），整体最优解：最后得到整体最大覆盖范围，看是否能到终点。</p><p>​<img src="https://resource.weizhanjun.com/public/images/20230111204342.png" alt="">​</p><p>i每次移动只能在cover的范围内移动，每移动一个元素，cover得到该元素数值（新的覆盖范围）的补充，让i继续移动下去。</p><p>而cover每次只取 max(该元素数值补充后的范围, cover本身范围)。</p><p>如果cover大于等于了终点下标，直接return true就可以了。</p></blockquote><h4 id="Go-题解-4"><a href="#Go-题解-4" class="headerlink" title="Go 题解"></a>Go 题解</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">canJump</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数组长度为1，直接访问true</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化跳跃范围为0</span>    cover <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>cover<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        cover <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>i<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cover<span class="token punctuation">)</span>        <span class="token keyword">if</span> cover <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x<span class="token operator">-</span>y <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> y    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-题解-5"><a href="#C-题解-5" class="headerlink" title="C++ 题解"></a>C++ 题解</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    bool <span class="token function">canJump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cover <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>cover<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cover <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cover<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cover <span class="token operator">>=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> true<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-题解-4"><a href="#Python-题解-4" class="headerlink" title="Python 题解"></a>Python 题解</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canJump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        cover <span class="token operator">=</span> <span class="token number">0</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> cover<span class="token punctuation">:</span>            cover <span class="token operator">=</span> max<span class="token punctuation">(</span>i<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cover<span class="token punctuation">)</span>            <span class="token keyword">if</span> cover <span class="token operator">>=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化总结-1"><a href="#优化总结-1" class="headerlink" title="优化总结"></a>优化总结</h4><p>这道题目关键点在于：不用拘泥于每次究竟跳几步，而是看覆盖范围，覆盖范围内一定是可以跳过来的，不用管是怎么跳的。</p><p>这道题和贪心算法看似没有关系？</p><p><strong>是真的就是没什么联系，因为贪心无套路！</strong>没有个整体的贪心框架解决一系列问题，只能是接触各种类型的题目锻炼自己的贪心思维！</p><p>‍</p><h3 id="问题：45-跳跃游戏II"><a href="#问题：45-跳跃游戏II" class="headerlink" title="问题：45.跳跃游戏II"></a>问题：45.跳跃游戏II</h3><p><a href="https://leetcode.cn/problems/jump-game-ii/">LeetCode</a></p><blockquote><p>给定一个长度为 n 的 0 索引整数数组 nums。初始位置为 nums[0]。每个元素 nums[i] 表示从索引 i 向前跳转的最大长度。换句话说，如果你在 nums[i] 处，你可以跳转到任意 nums[i + j] 处:</p><p>0 &lt;= j &lt;= nums[i]<br>i + j &lt; n</p><p>返回到达 nums[n - 1] 的最小跳跃次数。生成的测试用例可以到达 nums[n - 1]。</p><p>提示:</p><p>1 &lt;= nums.length &lt;= 104<br>0 &lt;= nums[i] &lt;= 1000</p><p>示例1:</p><pre class="line-numbers language-shell"><code class="language-shell">输入: nums = [2,3,1,1,4]输出: 2解释: 跳到最后一个位置的最小跳跃数是 2。     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例2:</p><pre class="line-numbers language-shell"><code class="language-shell">输入: nums = [2,3,0,1,4]输出: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><p>局部最优：当前可移动距离尽可能多走，如果还没到终点，步数再加一。整体最优：一步尽可能多走，从而达到最小步数。</p><p>解题的时候，要从覆盖范围出发，不管怎么跳，覆盖范围内一定是可以跳到的，以最小的步数增加覆盖范围，覆盖范围一旦覆盖了终点，得到的就是最小步数！</p><p>这里需要统计两个覆盖范围，当前这一步的最大覆盖和下一步最大覆盖。</p><p>​<img src="https://resource.weizhanjun.com/public/images/20230112145739.png" alt="">​</p><p>图中覆盖范围的意义在于，只要红色的区域，最多两步一定可以到！（不用管具体怎么跳，反正一定可以跳到）</p></blockquote><h4 id="Go-题解-5"><a href="#Go-题解-5" class="headerlink" title="Go 题解"></a>Go 题解</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">jump</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    result <span class="token operator">:=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 记录走的最大步数</span>    curDistance <span class="token operator">:=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 当前覆盖最远距离下标</span>    nextDistance <span class="token operator">:=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 下一步覆盖最远距离下标</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新下一步覆盖最远距离下标</span>        nextDistance <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">,</span> nextDistance<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 遇到当前覆盖最远距离下标</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> curDistance <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果当前覆盖最远距离下标不是终点</span>            <span class="token keyword">if</span> curDistance <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 跳下一步</span>                result<span class="token operator">++</span>                <span class="token comment" spellcheck="true">// 更新当前覆盖最远距离下标</span>                curDistance <span class="token operator">=</span> nextDistance                <span class="token comment" spellcheck="true">// 下一步的覆盖范围已经可以达到终点，结束循环</span>                <span class="token keyword">if</span> nextDistance <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x <span class="token operator">-</span> y <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x    <span class="token punctuation">}</span>    <span class="token keyword">return</span> y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-题解-6"><a href="#C-题解-6" class="headerlink" title="C++ 题解"></a>C++ 题解</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curDistance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nextDistance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextDistance <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>i<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nextDistance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> curDistance<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result<span class="token operator">++</span><span class="token punctuation">;</span>                    curDistance <span class="token operator">=</span> nextDistance<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextDistance <span class="token operator">>=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-题解-5"><a href="#Python-题解-5" class="headerlink" title="Python 题解"></a>Python 题解</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">jump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        result <span class="token operator">=</span> <span class="token number">0</span>        curDistance <span class="token operator">=</span> <span class="token number">0</span>        nextDistance <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nextDistance <span class="token operator">=</span> max<span class="token punctuation">(</span>i<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nextDistance<span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">==</span>curDistance<span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">!=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                    result<span class="token operator">+</span><span class="token operator">+</span>                    curDistance <span class="token operator">=</span> nextDistance                    <span class="token keyword">if</span> nextDistance <span class="token operator">>=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                        <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="算法优化总结-4"><a href="#算法优化总结-4" class="headerlink" title="算法优化总结"></a>算法优化总结</h4><blockquote><p>理解本题的关键在于：以最小的步数增加最大的覆盖范围，直到覆盖范围覆盖了终点，这个范围内最小步数一定可以跳到，不用管具体是怎么跳的，不纠结于一步究竟跳一个单位还是两个单位。</p></blockquote><p>‍</p><p>‍</p><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Kubernetes</title>
      <link href="/2023/01/20//post/kubernetes-2jjikh.html/"/>
      <url>/2023/01/20//post/kubernetes-2jjikh.html/</url>
      
        <content type="html"><![CDATA[<h1 id="初识Kubernetes"><a href="#初识Kubernetes" class="headerlink" title="初识Kubernetes"></a>初识Kubernetes</h1><p>Kubernetes 也称为 K8s，谷歌开源的容器编排系统。<br>kubernets的介绍就是这么简单，全部重点在加粗字体上，“谷歌”意味着它的江湖地位，一句话就是出道即巅峰；<br>“容器”表示它的根基，它是以容器为基构建的庞大系统，所以有必要介绍下容器技术。</p><h2 id="1-1-容器发展"><a href="#1-1-容器发展" class="headerlink" title="1.1 容器发展"></a>1.1 容器发展</h2><p>容器技术算是一个新生事物，几乎完全重塑了整个云计算市场的形态。它不仅催生出了一批年轻有为的容器技术人，更培育出了一个具有相当规模的开源基础设施技术市场，从 AI、云计算、微服务、基础设施等维度多管齐下，各公司争相把容器和 Kubernetes 项目树立为战略重心之一。</p><p><strong>就在这场因“容器”而起的技术变革中，Kubernetes 项目已然成为容器技术的事实标准，重新定义了基础设施领域对应用编排与管理的种种可能。</strong></p><p>之所以要先说容器，是因为从过去以物理机和虚拟机为主体的开发运维环境，向以容器为核心的基础设施转变，也就是所谓的容器化，并不是一个温和的变革，中间涵盖了对网络、存储、调度、操作系统、分布式原理等多方面的容器化理解和改造，很有必要了解下容器和容器化到底是什么。</p><p>关于容器，详细介绍有很多内容，我们从几个简单问题开始，了解下容器的基本原理。</p><ul><li>为什么容器里只能跑“一个进程”？</li><li>一直在用的某个 JVM 参数，在容器里就不好使了？</li><li>容器网络连不通如何去 Debug？</li><li>Kubernetes 中 StatefulSet 和 Operator 有什么区别？PV 和 PVC 这些概念又该怎么用？</li></ul><p>上面的问题，涉及到Linux进程和容器的关系，Kubernetes的重要设计模式“控制器”，存储挂载，网络通信等等，这些往往在kubernets文档中不做介绍，但经验告诉我，这些才是最重要，也是最应该了解的。据我四年的kubernets工作经验看来，不同公司的Kubernetes集群最大的区别不在于版本和部署方式，而在于网络和存储的集成，能深刻理解这些，才能真正掌握云原生技术。</p><p>‍</p><h3 id="1-1-1-裸机时代"><a href="#1-1-1-裸机时代" class="headerlink" title="1.1.1 裸机时代"></a>1.1.1 裸机时代</h3><p>裸机时代，用户收到管理一切，硬件维护 -&gt; 系统维护 -&gt; 中间件维护 -&gt; 应用维护 -&gt; 数据维护。</p><p>当时为了打包中间件应用，方便重复部署和服务迁移，大厂里会打包很多RPM包；为了服务器迁移，甚至还会制作自定义系统镜像; 服务的部署，使用大量的shell脚本和python脚本，自动更新应用。</p><p>​<img src="https://resource.weizhanjun.com/public/images/20230120002948.png" alt="">​</p><p>面临的痛点就是本地开发环境和线上环境不一致，导致运行结果出错。</p><p>‍</p><h3 id="1-1-2-PaaS兴起"><a href="#1-1-2-PaaS兴起" class="headerlink" title="1.1.2 PaaS兴起"></a>1.1.2 PaaS兴起</h3><p>云计算的历史其实不长，我当然也不是讲历史的，只是有一些产品值得被记住，比如OpenStack。AWS Formation.</p><p>我在2016年的时候，在一家P2P公司工作，当时公司使用的就是OpenStack，当时的我也是刚毕业的小白，对于这种高大上的技术充满向往，于是查了很多资源学习。OpenStack，开源，云计算平台，NASA背书，后来多家大厂参与开发。</p><p>OpenStack能做到：</p><ol><li>计算资源的管理，数据中心的级别，管理大量虚拟机，开发者通过API创建管理资源，管理者通过web访问资源，API调用，是实现Pass的基础。</li><li>存储资源的管理，为虚拟机灵活分配块存储和对象存储，重点是可配置存储的功能。</li><li>网络资源，创建海量虚拟网络，插件式，API驱动型的网络管理。</li></ol><p>​<img src="https://resource.weizhanjun.com/public/images/20230105234852.png" alt="">​</p><p>同时期还有一个项目CLoud Foundry，同样是云计算领域的热门项目，完全开源，它最大的特点是最底层使用的是容器。</p><blockquote><p>PaaS时代到来了，那什么是PaaS，平台即服务，对于使用体验是这样的：任何人通过定义一些参数，在几分钟内就可以简单部署网络应用或服务，并让它们向世界开放，当一个应用变得流行起来时，云就可以轻松地扩展它来处理更多的流量。用几个按键代替几个月的构建和迁移，云平台代表了IT演进的下一步，让你专注于自己的应用和数据，而不担心底层的基础设施。</p></blockquote><p>举个例子，创建好虚拟机，在这些虚拟机上部署Cloud Foundry，开发者只要执行一条命令，就可以把服务部署到云上，命令是cf push <my_application>，最核心模块是应用的打包和分发机制。</p><ol><li>打包： cp push的作用就是把应用的可执行文件和启动脚本打进一个压缩包内，上传到云上Cloud Foundry 的存储中。</li><li>分发：Cloud Foundry 会通过调度器选择一个虚拟机，然后通知这个机器上的 Agent， 把应用压缩包download启动。</li></ol><p>同时，为了让一台虚拟机启动多个用户的应用，Cloud Foundry 调用操作系统的 Cgroups 和 Namespace 机制为每一个应用单独创建一个称作“沙盒”的隔离环境。</p><p>Docker出现了，Docker复制了Cloud Foundry的“沙盒”，复制了打包和分发，甚至更极端，除了打包执行文件和启动脚本，甚至打包了整个系统文件目录。就是这个小改动，解决了本地环境和云环境不一致的难题，更是成就了docker在容器领域独一无二的地位。</p><p>Docker的特点：</p><ol><li><p>PaaS系统的核心打包系统，变得更简单。Docker镜像里的系统文件和目录，可以轻松在互联网上获得，用户只需要定制打包过程，执行一条命令即可打包镜像：</p><blockquote><p>docker build -t <my_image> -f Dockerfile .</p></blockquote></li><li><p>PaaS系统分发解压过程也可以轻松实现, docker run <my_image> 即可从远端拉取镜像并解压执行。</p></li></ol><p>Docker 项目给 PaaS 世界带来的“降维打击”，其实是提供了一种非常便利的打包机制。这种机制直接打包了应用运行所需要的整个操作系统，从而保证了本地环境和云端环境的高度一致，避免了用户通过“试错”来匹配两种不同运行环境之间差异的痛苦过程。</p><p>‍</p><h3 id="1-1-3-CaaS兴起"><a href="#1-1-3-CaaS兴起" class="headerlink" title="1.1.3 CaaS兴起"></a>1.1.3 CaaS兴起</h3><p>比较遗憾的是，Docker并没有第一时间推出容器集群管理，所以它并不能代替PaaS完成大规模应用的部署工作，而Cloud Foundry 项目由于商业上的考虑，也并没有第一时间使用 Docker 作为自己的核心依赖，去替换自己那套饱受诟病的打包流程。</p><p>反倒是一些机敏的创业公司，纷纷在第一时间推出了 Docker 容器集群管理的开源项目（比如Deis 和 Flynn），它们自称Caas，即Container as a Service。</p><p>2014年，Docker推出了“Docker原生”容器集群管理项目Swarm，将Caas推向新的高度，重新定义了新的PaaS。“PaaS”的定义已经全然不是 Cloud Foundry 描述的那个样子，而是变成了一套以 Docker 容器为技术核心，以 Docker 镜像为打包标准的、全新的“容器化”思路。</p><p>在过去的很长一段时间里，相较于前端和互联网技术社区，服务器端技术社区一直是一个相对沉闷而小众的圈子。在这里，从事 Linux 内核开发的极客们自带“不合群”的“光环”，后端开发者们啃着多年不变的 TCP/IP 发着牢骚，运维更是天生注定的幕后英雄。</p><p>而 Docker 项目，却给后端开发者提供了走向聚光灯的机会。就比如 Cgroups 和 Namespace 这种已经存在多年却很少被人们关心的特性，在 2014 年和 2015 年竟然频繁入选各大技术会议的分享议题，就因为听众们想要知道 Docker 这个东西到底是怎么一回事儿。</p><p>而 Docker 项目之所以能取得如此高的关注，一方面它解决了应用打包和发布这一困扰运维人员多年的技术难题；而另一方面，就是因为它第一次把一个纯后端的技术概念，通过非常友好的设计和封装，交到了最广大的开发者群体手里。</p><p>在这种独特的氛围烘托下，你不需要精通 TCP/IP，也无需深谙 Linux 内核原理，哪怕只是一个前端或者网站的 PHP 工程师，都会对如何把自己的代码打包成一个随处可以运行的 Docker 镜像充满好奇和兴趣。</p><p>解决了应用打包这个根本性的问题，同开发者与生俱来的的亲密关系，再加上 PaaS 概念已经深入人心的完美契机，成为 Docker 这个技术上看似平淡无奇的项目一举走红的重要原因。</p><p>就在这时，docker推出了swarm，悄悄走上了商业化的道路。</p><h3 id="1-1-4-容器编排"><a href="#1-1-4-容器编排" class="headerlink" title="1.1.4 容器编排"></a>1.1.4 容器编排</h3><p>有了容器，只是方便了应用的打包和使用，它始终只是一个启停容器的小工具，不具备平台的能力，所以容器编排出现了，在这个领域涌现出很多项目，可谓是群雄并起。</p><table><thead><tr><th>公司</th><th>容器运行时</th><th>容器编排<br /></th></tr></thead><tbody><tr><td>CoreOS</td><td>rkt</td><td>Fleet调度组合</td></tr><tr><td>Docker</td><td>docker</td><td>Swarm</td></tr><tr><td>Mesos<br /></td><td>-</td><td>Mesos</td></tr><tr><td>RedHat</td><td>-</td><td>OpenShift</td></tr><tr><td>Google</td><td>-</td><td>Kubernetes</td></tr></tbody></table><p>简单聊下这几个产品：</p><ol><li>CoreOS使用多个组件完成容器编排，无论从使用上还是生态上，都比不上docker，rkt容器也是打不开局面，完全被Docker压制.</li><li>Docker收购了Fig做容器编排，也就是后来的Compose。收购了SocketPlane做容器网络，收购了Tutum做Docker图形化管理，Flocker（后来被EMC收购）为Docker处理容器存储，Swarm容器编排原生支持Docker API，当时也是异常繁荣。</li><li>Mesos出身大数据领域，大规模集群管理很成熟，用户可以像使用一台机器那样轻松管理万台规模的机器，这是Docker创业公司所不具备的，受大型企业的追捧。</li><li>RedHat早期和Docker合作，也是重要的代码贡献者，最后因Docker平台化战略而退出，只剩下Cloud Foundry时代的产品OpenShift，很难和Swarm，Mesos竞争。</li></ol><p>Google起初发布了自己内部使用多年，经历过生产环境验证的 Linux 容器：lmctfy（Let Me Container That For You），当时面对强势崛起的Docker，google关闭了lmctfy，寻求Docker合作，共同推出了中立的容器运行时（container runtime）库作为Docker项目的核心依赖。当时docker在不久之后又自己发布了容器运行时库Libcontainer，由于太仓促，项目可读性差，bug众多，为社区诟病多年。</p><p>随着云的热度逐步提高（也有一部分原因是docker在容器运行时强硬态度，拒绝与别人合作），Docker牵头，CoreOS、Google、RedHat等共同宣布成立中立基金会，Docker公司将Libcontainer捐出，改名为RunC，并以RunC为依据，大家共同制定一套容器和镜像的标准和规范，这即是OCI(Open Container Initiative)。</p><p>因为OCI的提出，其实在一定程度上减少了各容器玩家对docker的依赖，Google开始在容器编排上发力，面对Memos的集群管理优势，Google拿出内部的集群管理系统（Borg）对抗，这就是Kubernetes。<br>Kubernetes的优势在于拥有Memos的集群能力，也有Docker的便捷性，同时它的开放特点，吸引无数开发者加入，对抗docker的商业帝国。<br>至于生态，Kubernetes同样不缺，CNCF是以Kubernetes为核心的，诞生了很多优秀项目，例如CNI，Fluentd等，都是容器生态的知名工具。<br>Kubernetes最大的优势是整个社区推进“民主化”架构，即：从 API 到容器运行时的每一层，Kubernetes 项目都为开发者暴露出了可以扩展的插件机制，鼓励用户通过代码的方式介入 Kubernetes 项目的每一个阶段。<br>这个最直观的感受就是，基于Kubernetes诞生了很多二次开发的产品，比如微服务网格Istio，比如各种Operator，比如存储服务Ceph CSI等等。<br>更重要的是，不同于之前局限于“打包、发布”这样的 PaaS 化路线，这一次容器社区的繁荣，是一次完全以Kubernetes 项目为核心的“百家争鸣”。</p><h3 id="1-1-5-小结"><a href="#1-1-5-小结" class="headerlink" title="1.1.5 小结"></a>1.1.5 小结</h3><p>容器技术圈子在短短几年里发生了很多变数，但很多事情其实也都在情理之中。就像 Docker 这样一家创业公司，在通过开源社区的运作取得了巨大的成功之后，就不得不面对来自整个云计算产业的竞争和围剿。而这个产业的垄断特性，对于 Docker 这样的技术型创业公司其实天生就不友好。在这种局势下，接受微软的天价收购，在大多数人看来都是一个非常明智和实际的选择。但是Docker拒绝了，就不得不去对抗来自整个云计算产业的压力。只不过，Docker 公司最后选择的对抗方式，是将开源项目与商业产品紧密绑定，打造了一个极端封闭的技术生态。而这，其实违背了 Docker 项目与开发者保持亲密关系的初衷。相比之下，Kubernetes 社区，正是以一种更加温和的方式，承接了 Docker 项目的未尽事业，即：以开发者为核心，构建一个相对民主和开放的容器生态。这也是为何Kubernetes 项目的成功其实是必然的。</p><p>‍</p><h2 id="1-2-容器基础"><a href="#1-2-容器基础" class="headerlink" title="1.2 容器基础"></a>1.2 容器基础</h2><p>容器其实是一种沙盒技术。顾名思义，沙盒就是能够像一个集装箱一样，把你的应用“装”起来的技术。这样，应用与应用之间，就因为有了边界而不至于相互干扰；而被装进集装箱的应用，也可以被方便地搬来搬去。</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> _posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法(backtrack)</title>
      <link href="/2023/01/05//post/backtrack-oosh7.html/"/>
      <url>/2023/01/05//post/backtrack-oosh7.html/</url>
      
        <content type="html"><![CDATA[<h1 id="回溯算法-backtrack"><a href="#回溯算法-backtrack" class="headerlink" title="回溯算法(backtrack)"></a>回溯算法(backtrack)</h1><h1 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h1><p>回溯法也可以叫做回溯搜索法，它是一种搜索的方式。</p><p>回溯是递归的副产品，只要有递归就会有回溯。</p><p>回溯本质上是一种暴力穷举算法，把所有的可能都列举出来，所以回溯并不高效。</p><h2 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h2><p>回溯法解决的问题都可以抽象为树形结构（N叉树）。</p><p>因为回溯法解决的都是在集合中递归查找子集，集合的大小就构成了树的宽度，递归的深度，都构成的树的深度。</p><p>递归就要有终止条件，所以必然是一棵高度有限的树（N叉树）。</p><h2 id="算法模版"><a href="#算法模版" class="headerlink" title="算法模版"></a>算法模版</h2><p>回溯算法函数一般命名为backtracking，无返回值。</p><p>回溯三部曲：</p><ul><li>递归参数</li><li>递归终止条件</li><li>单层搜索逻辑</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>终止条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>        存放结果<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>选择：本层集合中元素（树中节点孩子的数量就是集合的大小）<span class="token punctuation">)</span> <span class="token punctuation">{</span>        处理节点<span class="token punctuation">;</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>路径，选择列表<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归</span>        回溯，撤销处理结果    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‍</p><h2 id="算法能解决的问题"><a href="#算法能解决的问题" class="headerlink" title="算法能解决的问题"></a>算法能解决的问题</h2><p>回溯法，一般可以解决如下几种问题：</p><p>组合问题：N个数里面按一定规则找出k个数的集合<br>切割问题：一个字符串按一定规则有几种切割方式<br>子集问题：一个N个数的集合里有多少符合条件的子集<br>排列问题：N个数按一定规则全排列，有几种排列方式<br>棋盘问题：N皇后，解数独等等</p><hr><h1 id="算法刷题路线"><a href="#算法刷题路线" class="headerlink" title="算法刷题路线"></a>算法刷题路线</h1><p>​<img src="https://resource.weizhanjun.com/public/images/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95(Backtracking).png" alt="">​</p><p>‍</p><h1 id="刷题记录"><a href="#刷题记录" class="headerlink" title="刷题记录"></a>刷题记录</h1><h2 id="组合问题"><a href="#组合问题" class="headerlink" title="组合问题"></a>组合问题</h2><iframe src="https://player.bilibili.com/player.html?aid=542758091&amp;bvid=BV1ti4y1L7cv&amp;cid=466224038&amp;page=1" data-src="//player.bilibili.com/player.html?aid=542758091&amp;bvid=BV1ti4y1L7cv&amp;cid=466224038&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 739px; height: 358px;"></iframe><h3 id="LeetCode77-组合"><a href="#LeetCode77-组合" class="headerlink" title="LeetCode77 组合"></a>LeetCode77 组合</h3><p><a href="https://leetcode.cn/problems/combinations/">LeetCode</a></p><blockquote><p>给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。</p></blockquote><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><p>如果k为2，可以使用两个for实现</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> resultList <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> j<span class="token operator">:=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span> <span class="token punctuation">{</span>        resultList <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>resultList<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果k为3，可以使用三个for实现</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> resultList <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> j<span class="token operator">:=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> u<span class="token operator">:=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>u<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>u<span class="token operator">++</span> <span class="token punctuation">{</span>        resultList <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>resultList<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>u<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当k为20时，需要20个for实现，显然不行，回溯法就用递归来解决嵌套层数的问题。</p><p>递归来做层叠嵌套（可以理解是开k层for循环），每一次的递归中嵌套一个for循环，那么递归就可以用于解决多层嵌套循环的问题了。</p><p>可以抽象成n叉树问题，树高为k，树宽是n，n叉树遍历。</p><p>​<img src="https://resource.weizhanjun.com/public/images/20230105213311.png" alt="">​</p><p>每次从集合中选取元素，可选择的范围随着选择的进行而收缩，调整可选择的范围。</p><p>每次搜索到叶子节点，就找到一个结果。</p><p>只需要把达到叶子节点的结果收集起来，就可以求得 n个数中k个数的组合集合。</p><p>结合算法模版，思路是：</p><p><strong>终止条件</strong>：搜索到叶子节点，路径长度为k</p><p><strong>搜索过程</strong>：for循环用来横向遍历，递归的过程是纵向遍历</p><p><strong>剪枝</strong>：纵向递归还需要元素个数大于横向遍历剩余元素个数时，不需要横向遍历了。</p><p>‍</p><p>​<img src="https://raw.githubusercontent.com/weizj2000/siyuan/main/public/images/20230105230357.png" alt="">​</p></blockquote><p>‍</p><h4 id="Go解题"><a href="#Go解题" class="headerlink" title="Go解题"></a>Go解题</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 定义中间结果变量</span>    intermediateResult <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// 定义结果变量</span>    resultSet  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">combine</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    intermediateResult<span class="token punctuation">,</span> resultSet <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resultSet<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 递归函数，</span><span class="token keyword">func</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> startIndex <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 终止条件, 到达叶子节点，intermediateResult长度为k</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>intermediateResult<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token punctuation">{</span>    tmp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>    <span class="token function">copy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> intermediateResult<span class="token punctuation">)</span>        resultSet <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// for横向递归，startIndex记录当前横向位置</span>    <span class="token comment" spellcheck="true">// 集合n中至多要从该起始位置 : n - (k - path.size()) + 1，开始遍历</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>intermediateResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 剪枝 纵向递归还需要元素个数大于横向遍历剩余元素个数时，不需要横向遍历了</span>        <span class="token comment" spellcheck="true">//if k-len(intermediateResult) > n-i+1 {</span>        <span class="token comment" spellcheck="true">//    return</span>        <span class="token comment" spellcheck="true">//}</span>        <span class="token comment" spellcheck="true">// 处理当前节点</span>        intermediateResult <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>intermediateResult<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 递归，树纵向遍历</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 回溯，撤销处理当前节点</span>        intermediateResult <span class="token operator">=</span> intermediateResult<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>intermediateResult<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-解题"><a href="#C-解题" class="headerlink" title="C++解题"></a>C++解题</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>private<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> resultSet<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> intermediateResult<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intermediateResult<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        resultSet<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>intermediateResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">-</span>intermediateResult<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        intermediateResult<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intermediateResult<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultSet<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LeetCode39-组合总和"><a href="#LeetCode39-组合总和" class="headerlink" title="LeetCode39 组合总和"></a>LeetCode39 组合总和</h3><p>‍</p><blockquote><p>给你一个无重复元素的整数数组 <code>candidates</code>​ 和一个目标整数 <code>target ​</code>​，找出 <code>candidates ​</code>​中可以使数字和为目标数 <code>target</code>​ 的所有不同组合 ，并以列表形式返回。你可以按任意顺序返回这些组合。</p><p>​<code>candidates</code>​ 中的同一个数字可以无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。</p><p>对于给定的输入，保证和为 <code>target</code>​ 的不同组合数少于 150 个。</p></blockquote><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><p>数组<code>candidates</code>​得到所有组合，组合元素总和为<code>target</code>​，就是结果子集.</p><p>数组<code>candidates</code>​元素抽象为N叉树，递归没有层数限制，只有总和限制。</p><p>结合回溯模版，思路如下：</p><p><strong>递归参数</strong>：</p><ul><li>定义两个变量resultSet，intermediateResult分别存放结果集和符合条件的中间结果集。</li><li>定义一个sum变量统计中间结果集中的加和。也可以不定义，<code>target</code>​减小。</li></ul><p><strong>终止条件</strong>：sum等于target时，就是结果；sum大于target，递归就不必进行了。</p><p><strong>单层搜索逻辑</strong>：</p><ul><li>for循环从startIndex开始，搜索<code>candidates</code>​数组。</li><li>因为元素可以重复选取，startIndex不递增，始终为0</li></ul><p><strong>剪枝</strong>：数组排序后，如果sum&gt;target，可以不进行递归了，for循环条件可以更改为 i&lt;candidates.size() &amp;&amp; sum &lt;= target</p><p>‍</p></blockquote><h4 id="Go解题-1"><a href="#Go解题-1" class="headerlink" title="Go解题"></a>Go解题</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    resultSet <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    intermediateResult <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>candidates <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    resultSet<span class="token punctuation">,</span> intermediateResult <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//剪枝</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resultSet<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> indexStart <span class="token builtin">int</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 终止条件</span>    <span class="token keyword">if</span> target <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        tmp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>intermediateResult<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">copy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> intermediateResult<span class="token punctuation">)</span>        resultSet <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 单层搜索逻辑</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> indexStart<span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>        intermediateResult <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>intermediateResult<span class="token punctuation">,</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 元素可以重复用，indexStart不递增</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span>target <span class="token operator">-</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        intermediateResult <span class="token operator">=</span> intermediateResult<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>intermediateResult<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-解题-1"><a href="#C-解题-1" class="headerlink" title="C++解题"></a>C++解题</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>private<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> resultSet<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> intermediateResult<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span> <span class="token keyword">int</span> indexStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultSet<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>intermediateResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// for (int i = indexStart; i &lt; candidates.size(); i++) {</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> indexStart<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+</span><span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            intermediateResult<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">-</span><span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            intermediateResult<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultSet<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‍</p><h3 id="LeetCode40-组合总和II"><a href="#LeetCode40-组合总和II" class="headerlink" title="LeetCode40 组合总和II"></a>LeetCode40 组合总和II</h3><iframe src="https://player.bilibili.com/player.html?aid=859176918&amp;bvid=BV12V4y1V73A&amp;cid=866135033&amp;page=1" data-src="//player.bilibili.com/player.html?aid=859176918&amp;bvid=BV12V4y1V73A&amp;cid=866135033&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><a href="https://leetcode.cn/problems/combination-sum-ii/">LeetCode</a></p><blockquote><p>给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的每个数字在每个组合中只能使用 一次 。注意：解集不能包含重复的组合。</p></blockquote><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><p>组合问题，和上面不同的在于元素不重复。</p><p>结合回溯模版，思路如下：</p><p><strong>回溯参数</strong>：定义两个变量resultSet，intermediateResult分别存放结果集和符合条件的中间结果集。</p><p><strong>终止条件</strong>：<code>candidates</code>​排序，加和等于或者大于target终止。</p><p>单层搜索逻辑：</p><ul><li>for 循环从startIndex开始, 搜索<code>candidates</code>​数组。</li><li>元素不能重复取，startIndex需要递增。</li><li>组合不能重复，问题的关键在于组合去重, 使用过的元素不能重复选取。</li><li>组合问题可以抽象为树形结构，那么“使用过”在这个树形结构上是有两个维度的，一个维度是同一树枝上使用过，一个维度是同一树层上使用过。</li><li>元素在同一个组合内是可以重复的，但两个组合不能相同，要去重的是同一树层上的“使用过”，同一树枝上的都是一个组合里的元素，不用去重。</li></ul><p>​<img src="https://raw.githubusercontent.com/weizj2000/siyuan/main/public/images/20230106190459.png" alt=""></p><p>要去重的是“同一树层上的使用过”，如何判断同一树层上元素（相同的元素）是否使用过了？</p><p>树层相邻的两个元素相等，且上一个元素被使用过，那么这个元素就不需要遍历了，注定会重复的。</p><p>代码表述就是<code>candidates[i] == candidates[i - 1]</code>​ 且<code>used[i - 1] == false</code>​</p><p>如图：</p><p>​<img src="https://raw.githubusercontent.com/weizj2000/siyuan/main/public/images/20230106204826.png" alt="">​</p><p><strong>注意</strong>：数组必须是排序后的，used数组定义了使用状态, 当前位置使用过就为1，没有使用过就为0.</p></blockquote><p>​</p><h4 id="Go解题-2"><a href="#Go解题-2" class="headerlink" title="Go解题"></a>Go解题</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 结果集</span>    rs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// 中间结果集</span>    irs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>candidates <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    rs<span class="token punctuation">,</span> irs <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span>    used <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> used<span class="token punctuation">)</span>    <span class="token keyword">return</span> rs<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> indexStart <span class="token builtin">int</span><span class="token punctuation">,</span> used <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> target <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        tmp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>irs<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">copy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> irs<span class="token punctuation">)</span>        rs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span>indexStart<span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> target <span class="token operator">&lt;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>candidates<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        irs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>irs<span class="token punctuation">,</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token operator">-</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> used<span class="token punctuation">)</span>        irs <span class="token operator">=</span> irs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>irs<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-解题-2"><a href="#C-解题-2" class="headerlink" title="C++解题"></a>C++解题</h4><pre class="line-numbers language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>private<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> resultSet<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> intermediateResult<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span> <span class="token keyword">int</span> indexStart<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>bool<span class="token operator">></span><span class="token operator">&amp;</span> used<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultSet<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>intermediateResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> indexStart<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>candidates<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum <span class="token operator">+</span><span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            intermediateResult<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>            sum <span class="token operator">-</span><span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            intermediateResult<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>bool<span class="token operator">></span> <span class="token function">used</span><span class="token punctuation">(</span>candidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>candidates<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> candidates<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultSet<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‍</p><p>‍</p><p>‍</p><h3 id="LeetCode40-组合总和III"><a href="#LeetCode40-组合总和III" class="headerlink" title="LeetCode40 组合总和III"></a>LeetCode40 组合总和III</h3><p>‍</p><p>‍</p><h3 id="LeetCode17-电话号码的字母组合"><a href="#LeetCode17-电话号码的字母组合" class="headerlink" title="LeetCode17 电话号码的字母组合"></a>LeetCode17 电话号码的字母组合</h3><p>‍</p><p>‍</p><h2 id="分割问题"><a href="#分割问题" class="headerlink" title="分割问题"></a>分割问题</h2><h3 id="LeetCode131-分割回文串"><a href="#LeetCode131-分割回文串" class="headerlink" title="LeetCode131 分割回文串"></a>LeetCode131 分割回文串</h3><p><a href="https://leetcode.cn/problems/palindrome-partitioning/">LeetCode</a></p><blockquote><p>给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。</p></blockquote><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><p>切割求子集，有不同的切割方法，并判断回文。</p><p>切割问题，也可以抽象为一棵树形结构，如图：</p><p>​<img src="https://raw.githubusercontent.com/weizj2000/siyuan/main/public/images/20230106222018.png" alt=""></p><p>递归用来纵向遍历，for循环用来横向遍历，切割线（就是图中的红线）切割到字符串的结尾位置，说明找到了一个切割方法。典型的回溯算法。</p><p>结合回溯模版，思路如下：</p><p>回溯参数：</p><p>‍</p></blockquote><p>‍</p><h3 id="LeetCode93-复原IP地址"><a href="#LeetCode93-复原IP地址" class="headerlink" title="LeetCode93 复原IP地址"></a>LeetCode93 复原IP地址</h3><p>‍</p><h2 id="子集问题"><a href="#子集问题" class="headerlink" title="子集问题"></a>子集问题</h2><h3 id="LeetCode78-子集"><a href="#LeetCode78-子集" class="headerlink" title="LeetCode78 子集"></a>LeetCode78 子集</h3><p>‍</p><p>‍</p><h3 id="LeetCode90-子集II"><a href="#LeetCode90-子集II" class="headerlink" title="LeetCode90 子集II"></a>LeetCode90 子集II</h3><p>‍</p><p>‍</p><h3 id="LeetCode491-递增子序列"><a href="#LeetCode491-递增子序列" class="headerlink" title="LeetCode491 递增子序列"></a>LeetCode491 递增子序列</h3><p>‍</p><p>‍</p><h2 id="排列问题"><a href="#排列问题" class="headerlink" title="排列问题"></a>排列问题</h2><p>‍</p><h3 id="LeetCode46-全排列"><a href="#LeetCode46-全排列" class="headerlink" title="LeetCode46 全排列"></a>LeetCode46 全排列</h3><p>‍</p><h3 id="LeetCode47-全排列II"><a href="#LeetCode47-全排列II" class="headerlink" title="LeetCode47 全排列II"></a>LeetCode47 全排列II</h3><p>‍</p><p>‍</p><h2 id="棋盘问题"><a href="#棋盘问题" class="headerlink" title="棋盘问题"></a>棋盘问题</h2><p>‍</p><h3 id="LeetCode51-N皇后"><a href="#LeetCode51-N皇后" class="headerlink" title="LeetCode51 N皇后"></a>LeetCode51 N皇后</h3><p>‍</p><h3 id="LeetCode37-解独数"><a href="#LeetCode37-解独数" class="headerlink" title="LeetCode37 解独数"></a>LeetCode37 解独数</h3><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> _posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leecode </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二零一九年终总结</title>
      <link href="/2019/12/22/2019-conclusion/"/>
      <url>/2019/12/22/2019-conclusion/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=545285646&auto=1&height=66"></iframe></div><p>时间过得很快，转眼又到了年终。回顾过往，这一年算是最平静的一年了。闲来无事，随便写写，有感而发，无病呻吟而已。</p><h1 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h1><hr><p>回顾我的 2019，没做什么特别的事，令我能记得就 3 件大事吧：</p><ul><li>买房</li><li>换工作</li><li>考研失利</li></ul><p><strong>第一件事</strong>买房，几乎逛遍了所有楼盘，过程很长很累，结果勉强能接受，不管怎么说，终于有个落脚的地方了，虽然在老家。<br><img src="749826.jpg" alt=""></p><p><strong>第二件事</strong>过程同样不轻松，跑了多家简历，最后选了一家对自己未来发展有帮助的公司，加油，争取再提高。<br><img src="2.jpg" alt=""><br><strong>第三件事</strong>也是意料之中吧，没有什么波折。过程不想回忆了，虽然时间不充裕，但是感觉还是尽力了，事情太多，没有办法回到从前的学生时代了，现在尘埃落定，靠人不如靠自己，继续努力吧。<br><img src="3.jpg" alt=""></p><p>过去的一年，学业未有很大长进，工作也并不是很顺利，不过总算换了工作，希望新的工作能给我带来新的惊喜吧。<br>新的一年，希望自己还能有进步，加油 2020。</p><p><strong>最后</strong> 祝愿自己在新的一年，工作顺心，平安顺意。<br>希望能邂逅一段美妙的爱情。</p><p><img src="1.jpg" alt=""></p><blockquote><p>我遇见谁，会有怎样的对白。<br>我等的人，她在多远的未来。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
